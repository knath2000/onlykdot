---
// src/pages/projects/[slug].astro - Dynamic page for individual projects
import { type CollectionEntry, getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
// Import any components needed for rendering project details, e.g., image gallery
// import ImageGallery from '../../components/ImageGallery.astro';

// 1. Generate static paths for all projects defined in src/content/projects
export async function getStaticPaths() {
  const projects = await getCollection('projects'); // Assumes a 'projects' collection
  return projects.map((project: CollectionEntry<'projects'>) => ({ // Add explicit type
    params: { slug: project.slug }, props: { project },
  }));
}

// Type helper for props
type Props = {
  project: CollectionEntry<'projects'>; // Type based on collection name
}

const { project } = Astro.props;
const { Content } = await project.render(); // Get the rendered Markdown content

// Use project data for page title and description
const pageTitle = `${project.data.title} - Project Details`;
const pageDescription = project.data.shortDesc || `Details about the ${project.data.title} project.`; // Fallback description
---
<BaseLayout title={pageTitle} description={pageDescription}>
	<article class="max-w-4xl mx-auto py-8">
		{/* Project Header */}
		<header class="mb-8 text-center">
			<h1 class="text-4xl md:text-5xl font-heading font-bold mb-4">{project.data.title}</h1>
			<p class="text-lg text-secondary">{project.data.shortDesc}</p>
			{project.data.publishDate && (
				<p class="text-sm text-gray-500 mt-2">Published: {project.data.publishDate.toLocaleDateString()}</p>
			)}
		</header>

		{/* Optional Thumbnail/Hero Image */}
		{project.data.thumbnail && (
			<img src={project.data.thumbnail} alt={`${project.data.title} thumbnail`} class="w-full h-auto max-h-[500px] object-cover rounded-lg shadow-lg mb-8" />
		)}

		{/* Main Content Sections */}
		<div class="prose prose-invert prose-lg max-w-none mx-auto"> {/* Use Tailwind Typography for Markdown */}
			{/* Render Markdown content */}
			<Content />

			{/* Additional structured data sections */}
			{project.data.problemStatement && (
				<section class="mt-8">
					<h2>Problem/Solution</h2>
					<p>{project.data.problemStatement}</p>
				</section>
			)}

			{project.data.techStack && project.data.techStack.length > 0 && (
				<section class="mt-8">
					<h2>Tech Stack</h2>
					<ul class="list-disc list-inside">
						{project.data.techStack.map((tech: string) => <li>{tech}</li>)}
					</ul>
				</section>
			)}
		</div>

		{/* Links Section */}
		{(project.data.links?.live || project.data.links?.repo) && (
			<footer class="mt-12 pt-6 border-t border-gray-700/50 flex justify-center gap-6">
				{project.data.links.live && (
					<a href={project.data.links.live} target="_blank" rel="noopener noreferrer" class="inline-block px-6 py-2 bg-accent-green text-base font-bold rounded hover:bg-opacity-80 transition-colors">
						Live Demo
					</a>
				)}
				{project.data.links.repo && (
					<a href={project.data.links.repo} target="_blank" rel="noopener noreferrer" class="inline-block px-6 py-2 bg-accent-magenta text-base font-bold rounded hover:bg-opacity-80 transition-colors">
						GitHub Repo
					</a>
				)}
			</footer>
		)}

		{/* Back to Projects Link */}
		<div class="text-center mt-12">
			<a href="/projects" class="text-accent-blue hover:underline">&larr; Back to All Projects</a>
		</div>

	</article>
</BaseLayout>