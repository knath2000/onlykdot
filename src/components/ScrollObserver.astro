---
// src/components/ScrollObserver.astro
// Adds a 'is-visible' class when the element enters the viewport.

interface Props {
    threshold?: number; // How much of the element needs to be visible (0 to 1)
    triggerOnce?: boolean; // Only trigger the animation once
    rootMargin?: string; // Margin around the root viewport
    as?: string; // HTML tag to render as (default: div)
    class?: string; // Pass through classes
}

const {
    threshold = 0.1, // Default to 10% visible
    triggerOnce = true,
    rootMargin = '0px',
    as: Tag = 'div', // Default to div
    class: className, // Capture passed classes
    ...rest // Capture any other attributes
} = Astro.props;

const elementId = `scroll-observer-${Math.random().toString(36).substring(2, 9)}`;
---
<Tag id={elementId} class:list={["scroll-observer-target", className]} {...rest}>
    <slot />
</Tag>

<script define:vars={{ elementId, threshold, triggerOnce, rootMargin }}>
    const element = document.getElementById(elementId);

    if (!element) {
        console.error(`ScrollObserver: Element with ID ${elementId} not found.`);
    } else {
        const observer = new IntersectionObserver(
            (entries) => {
                entries.forEach((entry) => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('is-visible');
                        if (triggerOnce) {
                            observer.unobserve(entry.target); // Stop observing after first trigger
                        }
                    } else {
                        // Optional: Remove class when element leaves viewport if triggerOnce is false
                        if (!triggerOnce) {
                            entry.target.classList.remove('is-visible');
                        }
                    }
                });
            },
            {
                threshold: threshold, // Trigger when threshold% is visible
                rootMargin: rootMargin, // Adjust viewport bounds
            }
        );

        observer.observe(element);

        // Optional: Cleanup observer on component unmount (relevant for SPA-like transitions)
        // This might require more complex handling in Astro if elements are frequently added/removed
        // document.addEventListener('astro:page-load', () => {
        //     // Need logic to re-initialize or check if element still exists
        // });
        // document.addEventListener('astro:before-swap', () => {
        //     observer.disconnect(); // Disconnect before page transition
        // });
    }
</script>

<style is:global>
    /* Example transition for elements using this observer */
    .scroll-observer-target {
        opacity: 0;
        transform: translateY(20px);
        transition: opacity 0.6s ease-out, transform 0.6s ease-out;
    }
    .scroll-observer-target.is-visible {
        opacity: 1;
        transform: translateY(0);
    }
</style>