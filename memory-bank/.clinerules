# Project Intelligence: Personal Portfolio Website

This file captures key patterns, workflows, and technical notes specific to this project to aid development consistency.

## Content Management (Astro Content Collections)

*   **Adding New Projects:**
    *   Project data is managed via Markdown files within `src/content/projects/`.
    *   **Workflow:** To add a project based on external documentation (like Memory Bank files from another project):
        1.  Place the source documentation files in a temporary directory (e.g., `temp/`).
        2.  Read the source files (`projectbrief.md`, `productContext.md`, `techContext.md`, etc.) to extract required schema fields (`title`, `shortDesc`, `techStack`, `problemStatement`, etc., defined in `src/content/config.ts`).
        3.  Gather any missing required information (e.g., `thumbnail` path, `links`) from the user.
        4.  Create a new `.md` file in `src/content/projects/` (e.g., `new-project-slug.md`).
        5.  Format the extracted information into the YAML frontmatter of the new file according to the schema.
        6.  Add a brief summary paragraph below the frontmatter as the main content.
*   **Previewing New Content:**
    *   The Astro development server (`npm run dev`) usually picks up new `.md` files in the content collection automatically (or after a server restart).
    *   **IMPORTANT:** The Astro preview server (`npm run preview`) serves the *last static build*. To see newly added content collection items in the preview server, you **must** run `npm run build` first to generate an updated static site, then run `npm run preview`.

## Project Card Patterns

*   **Animated Project Card (2025-04-15):**
    *   All project cards now support dynamic content from Astro Content Collections.
    *   The animated sample card (Flutter macOS Task Manager) demonstrates:
        - Title, shortDesc, techStack, summary, links, thumbnail, and `isAnimated` are all dynamic.
        - Any project with `isAnimated: true` in its frontmatter will render as an animated card.
        - Thumbnail is rendered as a rounded rectangle below the shortDesc and above the tech stack.
        - On hover, the summary overlays the thumbnail with a semi-transparent, rounded rectangle.
        - Live/Repo links are shown as buttons below the tech stack.
        - "See Animation" button triggers a mo.js burst effect.
    *   **Astro Image Handling:**
        - The thumbnail field uses the image() helper in the schema and must be a relative path from the content file (e.g., ../../assets/project-thumbnails/flutter-planner.png).
        - In React, check if the thumbnail is an Astro image object and use .src for the image source.
        - Fallback SVG is only shown if the PNG is missing or the import fails.
    *   **Multiple Animated Cards:** The system supports multiple animated cards, each with unique content and slugs, controlled by the `isAnimated` field.
    *   **No Duplicates:** Only one card per project should exist in the content collection.

## Technical Notes

*   **Astro + React Islands:** Use Astro for SSG and React islands for interactivity/animation.
*   **mo.js Integration:** Use dynamic import for mo.js in React components to avoid SSR errors.
*   **Error Handling:** All image and content fields must be validated for type (string vs. object) before use.
*   **Accessibility:** All overlays and interactive elements should be accessible and keyboard-navigable.
*   **Schema Extension:** When adding new fields to project markdown, always update the schema in `src/content/config.ts` to ensure fields are available in the React components.

## Documentation

*   **Project Card Analysis:** The analysis of the project card implementation (`ProjectFilters.jsx`, `ProjectCardReact.jsx`) is documented in `docs/PROJECT_CARD_ANALYSIS.md`. This document uses a slightly gamified structure for clarity and engagement.

*(Add more rules and patterns here as they are discovered)*